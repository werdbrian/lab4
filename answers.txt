# Fill in your name, student ID, and email address in this file. If you are working in a team, fill
# out the information for both team  members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be automatically parsed in order
# to give both team members credit for the lab.

# You need to fill in the EXERCISE sections describing your solutions for Tasks 1, 2, and 3, as well
# as write the corresponding code. If you did one or more extra credit problems, indicate which one
# in the appropriate section below (remove the sign first). If you have any other information you'd
# like us to know, please add it at the end of the file.

# Partner 1 Name: William Lai  
Student ID: 404138817  
Email: williamlai@ucla.edu

# Partner 2 (if you're working in a team)   
Name: Brian Liu   
Student ID: 404354948 
Email:liubrian7@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload files in parallel? (~1-3 sentences)  We used the fork() function, as advised in section, to download and upload files in parallel.  First, we initiate all downloads as specified by the command line arguments by forking a seperate child thread for every download request and then call task_download on each child thread,
and _exit(0) when we are finished so we do not flush the buffer. After we have finished downloading all the files we need in parallel, we then begin  listening for incoming requests, and for each incoming request we fork and then call  task_upload(t) and _exit(0) when we are finished.  If it is the  parent thread it uses waitpid() to reap child zombie threads, which are no longer  in a
"runnable" state but havent been killed yet.

# EXERCISE 2A: What conditions did you find and fix that would have triggered a buffer overrun bug? (~1-3 sentences each)  We found two places where we detected possibilities for a buffer overflow bug: when the user downloads or uploads a file.  In the start_download function, we perform a direct strcpy without first checking to see if the filename is less than FILENAMESIZE-1 or 255(to account
for null terminating char).  To fix this, we make sure strlen(filename)<255 in the start_download function.  A filename larger than this will overwrite parts memory it shouldn't.  A second place we do not perform char buffer checking and makes us susceptible to buffer overflow attacks is in the task upload function.We check this by checking the size of the t->buf and make sure that it is less than 255+12, since the format of the buffer is "GET filename/0 OSP2P/n", we need to add 12 extras chars to the check to account for "GET /0 OSP2P\n".

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences each)

1.Getting peer list from popular tracker: We realized the char buffer alias did not allocate enough memory to fit larger aliases, so we increased the size of of TASKSIZEBUF by a factor of 8 to accommodate for larger aliases.  We found that increasing TASKSIZEBUF by a factor of four was enough to accommodate make run-popular, so we further increased it by another factor of 2 to allow for more
robustness.

2. Upload Robustness: One problem is we perform no checking on the filename the user is requesting. This leads to several issues: 
a) buffer overflow (described above)        
b) Unauthorized access to files (e.g. "../answers.txt", "/var/pwd", and "~/") - to prevent  this we do not allow any filename requests to start with the chars "/", "../", or "~" in the file requests, since this indicates the peer is trying to access a file outside of the test directory, home directory or an absolute path on
our machine.  We perform  a redundancy test by also making sure that the char the filename starts with is a  alphanumeric character.   
c) The second problem we prevent against is a user who attempts
to continually open new sockets with us. There was a malicious user that would attempt to continually open sockets with us until our program crashed. To remedy this, we set a rate limit by sleeping for 1 second before  accepting new connections.  We experienced one student who would constantly request open connections but with an empty file name.  He did this at such a fast rate it
crashed our program.  To remedy this we sleep 1 second in between fulfilling upload request effectively rate limiting the number of requests to 1 per second at the worst, which gives us enough time to process the request and avoid building a queue of unfulfilled requests.

3. Download Robustness:   a) One problem we checked for is malicious users who just intend on streaming infinite amounts of data by setting a hard limit on the file size being received.  We set the limit to 2 megabytes, since every single file we saw on being shared was less than 1 megabyte.
b) buffer overflow (as described above) 
c) We check every file downloaded against its md5sum when the file is first registered. This guarantees that the file is "authentic", or at least it is the
first file of its name registered on the p2p client.

4. Child Process Reaping: We also implemented proper handling of zombie child threads, for  both uploads and downloads child threads which have exited but are not yet killed. If we do  not perform proper clean up of these zombie threads they will linger and eventually we will  run out of memory to assign to new threads.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why are they attacks?  (~3-10
sentences each)

1. We implemented two download attacks. 
a) When evil_mode is on, for each file we request, we follow the usual procedure to find a peer to connect to, but then, instead of actually downloading that file, we ask to download a file with a very long name, which will cause buffer overflow in peers that do not handle that case. Although there is a check for length with the snscanf function, the maximum length given in the skeleton code is the size of the buffer, which is 4096, not the
maximum file size, which is 256. As stated in 2A, we need to check for this.   
b) Another download attack we implemented is an attempt to steal other people's files by requesting filenames outside of the test directory such as "../answers.txt".  If the user does not properly check for input in filename download requests, he is susceptible to getting files stolen.



2. We have also implemented several uploader attacks.  
a) For our first attack once  the user requests a file from us, instead of uploading their requested file we continue to open sockets with them until their program crashes .  We then close all of the sockets we opened in our attack, so our program can continue to operate.

b) Our second uploader attack involves streaming an infinite amount of data into the user.  While we are able to write to the particular file descriptor we stream data into the user. This will eventually fill up all his memory if he does not check for max file size.

c) The other attack is like the last one except we stream data very slowly. When evil_mode is on,  we simply have our peer stream a single byte repeatedly every second.   The connection will timeout if no data is received, so we stream false data very slowly. This slows the peers download speed and gives him the impression he is downloading the actual file when in reality he is downloading a fake file at a very slow speed.


Extra credit problems MD5SUM check Extra credit problem: MD5SUM, 2 extra attacks

 Addanyotherinformationyou'dlikeustoknowbelowthisline.
