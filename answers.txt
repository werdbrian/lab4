# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: William Lai
Student ID: 404138817
Email: williamlai@ucla.edu

# Partner 2 (if you're working in a team)
Name: Brian Liu
Student ID: 
Email: 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We used the fork() function, as advised in section, to download and upload files in parallel.  
For downloads:  We fork a seperate child thread for every download request we have as specified by the command line.  This thread then will call the task_download function

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
One char buffer which was not being checked for buffer overflows was the char filename buffer.  In osspeer we use strcpy to copy the contents of a char * pointing to a buffer of arbitrary length into the filename buffer.  The filename buffer can only hold FILENAMESIZ or 256 chars, so the longest filename it can handle without bufferoverflows is a string of length 255 (since we must account for ending with the null terminating characte.)  A malicious user could request a filename of length > 255 which would cause a buffer overflow error since we directly strcpy without checking the length of the requested filename.  Our solution is to check to make sure the sizeof the requested filename is < 255, and only then allow them to request the file to avoid buffer overflows. 

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
One of our attacks was a download attack. When evil_mode is on, for each file we
request, we follow the usual procedure to find a peer to connect to, but then,
instead of actually downloading that file, we ask to download a file with a very
long name, which will cause buffer overflow in peers that do not handle that
case.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
